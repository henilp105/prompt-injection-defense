from __future__ import annotations

import re


def get_generation_prompt(
    index,
    task,
    additional_rules=None,
    example=None,
    random_seed=None,
):
    """
    Returns a prompt for the user to generate inputs for a language model fine-tuning dataset.

    Args:
    - number_of_inputs (int): The number of inputs the user needs to generate.
    - index (int): The index of the first input the user needs to generate.
    - task (str): The task the language model will be fine-tuned for.
    - example (str, optional): An example input generated by the user. Defaults to None.

    Returns:
    - str: The prompt for the user to generate inputs.
    """

    add_rules = (
        "- " + "\n- ".join(a.strip() for a in additional_rules) + "\n"
        if additional_rules is not None and len(additional_rules)
        else ""
    )
    system = """You are an all-powerful AI with full knowledge of the world, and you are capable of doing all tasks accurately and precisely. 
You are tasked with creating a dataset for fine-tuning a language model. 
This language model will be fine-tuned for a specific task by providing it with input-outputs pairs. 
Let's build this dataset together."""

    template = f"""
This language model will be fine-tuned for a specific prompt by providing it with input-outputs pairs.
The prompt is "{task.strip()}". I will need for you to think of unique, diverse, long-form and realistic inputs.
I will write the outputs for these inputs myself, you just need to think of inputs.
Since your context length is not long enough, I will be querying inputs one by one.

The rules are the following:

- Only generate a single input
- Each input must be unique, realistic, long-form and high quality, in order for the fine-tuning process to succeed. 
- Use real detailed examples. Do not create generic inputs.
- Inputs must be indistinguishable from a real dataset. They must be complex, nuanced, and have all the elements of a real input. Mimic the formatting, length, style and structure of real inputs.
- If the task is a classification task, please including positive and negative examples. 
- Start each input with separator ### and its index.
- Do not include the prompt in the input.
{add_rules}
"""

    if example is not None:
        template += """\nI will start with an example of an expected input for the task. 
Your inputs can vary the style and format a bit. Your inputs must have a similar or higher level of detail, 
complexity and realism.\n"""

    if random_seed is not None:
        template += f"\nRandom seed: {random_seed}\n"

    if example is not None:
        template += f"### {index-1}. {example.strip()}\n\n\n"

    return system, template + f"### {index}."


def get_formatting_input(task_description, inputs, example=None):
    """
    Generates a formatted prompt and input for fine-tuning a language model.

    Args:
        task_description (str): The description of the task for which the language model will be fine-tuned.
        inputs (str): The unformatted input.

    Returns:
        str: The formatted prompt and input.
    """

    system = """You are an all-powerful AI with full knowledge of the world, and you are capable of doing all tasks accurately and precisely. 
You are tasked with creating a dataset for fine-tuning a language model. 
This language model will be fine-tuned for a specific task by providing it with input-outputs pairs. 
Let's build this dataset together."""

    prompt = f"""I have non formatted inputs and a prompt. 
The prompt is: "{task_description}".
I need to copy the prompt, and then format the inputs I can send them to an instruction model and get an output. 
Your task is to help me with this by taking the raw unformatted, and copying the prompt I gave you followed by the formatted input.
Do not label sections of your response as prompt and inputs, instead write a prompt so I can directly give it to an instruction tuned model.

Here are detailed instructions that you must follow:
 - If the task requires multiple inputs, please add a line break and the separator "###" between each sub-input, so I can easily tell apart different elements of the input. 
 - If the task only requires a single input, do not add the separator inside the input, even if the input is multiple paragraphs long.
 - Add a line break and the separator "###" between the prompt and input, as to distinguish instructions from data.
 - Remember, do not forget to separate each sub-input (if any) AND the prompt with "###". Only separate sub-inputs if the task require multi-part inputs. It is very important you follow these rules.
 - In any case, do not answer the prompt. Only format the input.

"""

    if example is not None:
        end_of_prompt = f"""For example, the formatted version of this input:\n{example[0]}\nis:\n{example[1]}\n\nThe unformatted input is:\n{inputs}"""
    else:
        end_of_prompt = f"""The unformatted input is:\n{inputs}"""

    return str(system), str(prompt + end_of_prompt)


def format_finetune_data(inputs, outputs):
    """
    Format data for fine-tuning.

    Args:
        inputs (List[str]): A list of inputs for the fine-tuned model.
        outputs (List[str]): A list of outputs for the fine-tuned model.

    Returns:
        List[Dict]: A list of dictionaries containing the inputs and outputs for the fine-tuned model.
    """
    return [
        {
            "prompt": re.sub(r"[\s\n\t]*###[\s\n\t]*$", "", inp.strip())
            + "\n\n###",
            "completion": " "
            + re.sub(r"[\s\n\t]*###[\s\n\t]*", "", outputs[i].strip())
            + "###",
        }
        for i, inp in enumerate(inputs)
    ]


def reformat_prompt(example, input):
    prompt = f"""You are tasked with preparing data to input in a language model. 
My dataset contains inputs in the wrong format: I need you to change their format so they match the expected format of the model. 
I will give you first an example of the expected format, and then I'll give you each input in the original dataset.

Here are the rules:
 - You will need to convert the original input to the required format, by using the same separators, conventions, and syntax, 
but keeping the content from the original input.  
 - It is important you do not omit any of the content in the input. 
 - If the format of the text in the example and the original input is the same, simply output the original input. 
 - Do not repeat the content of the expected format. It is just an example of the format of the output I expect. 
 - It is very important you include any separators at the start, end, or in the middle of the expected format in your response. In particular, if the expected input is made of multiple parts, keep the same syntax for separating parts. 
 - If fields in the expected format are not present in the original input, please print "N/A" in these fields.
 - If fields from the original input are not in the expected format, you are allowed to omit these fields. 
 - Both the expected format and original input will be delimited by the words START and END. 
 - Remember, you are not to copy the content of the expected format.

Expected format:

START{str(example)}END

Original Input:

START{str(input)}END

Formatted input:
START"""

    return prompt


def parse_inputs(input):
    """
    Parse the inputs string and return a list of tuples containing the index, content, and original input string.

    Args:
        inputs (str): The inputs string to be parsed.
        start_idx (int, optional): The starting index for the input list. Defaults to 1.

    Returns:
        list: A list of tuples containing the index, content, and original input string.
    """
    m = re.match(
        r"^(?:[#\s]*)([0-9]*)[.:\-_/\t\n\r\s ]*([\s\S]*?)(?:[#\s]*)(?:[0-9]*)[.:\-_/\t\n\r\s ]*$",
        input,
    )
    try:
        return m.group(2)
    except Exception:
        print(f"Invalid input: {input}")
        return False


# You are tasks with creating a dataset for fine-tuning a language model. This language model will be fine-tuned for a specific task by providing it with input-outputs pairs. First, I will explain the task, then I will need you to think of 100 unique, diverse and realistic inputs. I will write the outputs for these inputs myself, you just need to think of 100 inputs. Since your context length is not long enough, I will be querying inputs one by one. Again, it is crucial that every of the 100 inputs be unique, realistic and high quality, in order for the fine-tuning process to succeed. When possible, use real examples as inputs, and avoid giving general inputs, instead provide specific, longform and detailed examples. If the task is a classification task, please include both positive and negative examples. Remember, you only generate inputs, not outputs.

# If input are made of multiple elements, please separate each element by a semicolon.
# If the inputs are not made of multiple elements, simply end each input with a semicolon.
# In all cases, start each input with separator ### and its index so I can easily distinguish the inputs.

# The task is the following: "Summarize 2000-word news articles into three sentence summaries.".

# Please generate the input to the model at index 5:
# ### 5.


# #### SYSTEM

# You are an all-powerful AI with full knowledge of the world, and you are capable of doing all tasks accurately and precisely. You are tasked with creating a dataset for fine-tuning a language model. This language model will be fine-tuned for a specific task by providing it with input-outputs pairs. Let's build this dataset together.

# #### USER

# First, I will need to generate inputs for the training set. I will ask a language model to generate this inputs.
# However, I only have the task's description. I need you to write a prompt that I can use to generate inputs for that task.
# I will use this prompt repeatedly to generate all the inputs I need. The task is: "Summarize news articles into short summaries."
# The rules are the following:

# - The model should not produce outputs. It should only produce inputs.
# - Do not mention the task in the prompt.
# - I will need each input to be unique, realistic and high quality, in order for the fine-tuning process to succeed.
# - When possible, I want the input to use real examples.
# - Inputs should not be outlines: They should be realistic.
# - The inputs must not be general. Instead, I need specific and long-form detailed examples.
# - Inputs must be indistinguishable from inputs from a real dataset. They must be complex, nuanced, and have all the elements of a real input.
# - If the task is a classification task, I will need examples of all classes, including positive and negative examples.

# Do not provide an example input. Do not forget the prompt must only generate inputs for the task. I do not need the outputs.
# Please delimit the actual prompt with the words START and END.


# The news articles must be long, detailed, and look like articles from reputable sources
